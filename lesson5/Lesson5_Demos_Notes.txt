Previous week's Review:
    Design a Playbook with comment placeholders
    Add external vars/main_vars.yml file
    Become true/false
    Introduce conditikjal, dictionary and uisiing VSC to highlight brackets

This Week:
    Conditionals from data in complex outputs/registered variables + Msg syntax for output
    Complete starter.yml 
    Split into two playbooks and call them from a main.yml
    Import vs Include and use of vars to override values - different values in different playbooks/tasks
    Create basic role with separated playbooks, add /vars folder and /files folder
    Use of handlers to restart server or reload daemon
    Set environment vars - read file and extract values - like env var value




Use vars file to pass parameters to playbook instead of using update script:
2 CHoices:
1. rename build.yml_template and purge.yml_template to build.yml and purge. yml and update vars.yml with  $event_id $domain_name $username $password $PLAYBOOK_NAME(???)
2. Use ansible to generate a new build.yml and purge.yml from the vars.yml but do a search/replace on the internal vars with var values for  vars.yml (but what's the point?)
3. Ue a combinaton: don't generate new build/purge.yml files and instead use update_tempaltes to populate endpoints in vars.yml - or simply copy/paste if they don;t changte. 
Create a global vars.yml file and use that

https://docs.ansible.com/ansible/latest/user_guide/playbooks_environment.html