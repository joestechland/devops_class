# Lesson 3 Demos and Notes
# Review Ansible Testing setup: Control VM (Ubuntu) +  App and Db (OEL7.x)
# Control VM  - use desktop image - comes with Gnome
# add shqred folder to COntrol - copy to ~/devops_class for permissions
# reboot after creation (hung)
sudo apt update
sudo apt upgrade
# Use GitHib for source control manamgment )(SCM)
# Create/log into GitHub account
# create rpository and get clone link
# on PC locate where you want the repos cloned to C:\devops_class\git_repos
# while these run - clone github repos to c:\devops_class -> devops_class repos
# install git if needed: https://git-scm.com/download/win
git clone https://github.com/joestechland/devops_class.git
# clone repo with url - enter username/password
# In COntrol VM< start VSC and Open folder for cloned repo
# Test edit and add, commit and push
# Check Github for changes

# create keys ssh-keygen
# Control VM - run ansible script to configure (update, VSC, + account, ansible + linters)
# Create shared folder to c:\devops_class





# Create keys for passwordless ssh to the vms
# on Control: 
ssh-keygen
#CHange filename to ansible (/home/vagrant/.ssh/ansible)
enter password: none
. copy keys to other servers
ssh-copy-id vagrant@192.168.60.11
#Yes to continue connecting & password is vagrant
ssh-copy-id vagrant@192.168.60.12
#Yes to continue connecting & password is vagrant
# run ssh-agent
eval $(ssh-agent)
# Add your keys to the session:
ssh-add
try ssh to each server
ssh vagrant@192.168.60.11
ssh vagrant@192.168.60.12
# this should work - MAKE SURE to exit ssh when done with the server!
. Back at vagrant@control, try to ping the servers with ansible
ansible all -i "192.168.60.11, 192.168.60.12" -m ping

## Alternative use ansible key_file
in ansible.cfg
private_key_file =  ~/.ssh/ansible

If all this works, you can try the demos from class or play around yourself.

Remember to exit vagrant@control to run vagrant commands on the VMs:
vagrant suspend -a
#will suspend the servers
vagrant resume
#restarts them or you can use the Virtual Box UI
vagrant destroy will destroy the VMs - if you do this, you can use vagrant up to re-create them but you'll need to re-create all the keys.


. Create an inventory file on vagrant@control
#create a new file named inventory:
#start Visual Studio Code:
execute: code
File New File inventory.ini
[servers]
192.168.60.11
192.168.60.12

# Now run ansible ad hoc commands without list of servers:
ansible all -i inventory.ini -m ping

# Create config file
# add inventory private_key_file
# Rereun ansible ad hoc w/o inventory
